/*!
 * Yoguu Javascript Library
 * base64
 * data:2014年7月16日
 * mail:gandxiaowei@gmail.com
 * Copyright 2014 www.youguu.com
 */

/**
 *网络和版本的基础配置js
 *  */
var config_address = {
    data_address: "220.181.47.36",
    user_address: "220.181.47.36",
    mall_address: " 220.181.47.36",
    pay_address: "220.181.47.36",
    game_address: "220.181.47.36",
    stat_address: "220.181.47.36",
    push_address: "220.181.47.36",
    weibo_address: "220.181.47.36",
    wap_address: "220.181.47.36",
    market_address: "220.181.47.36",
    static_html_address: "192.168.1.22:7073",
    match_address: "220.181.47.36",
    superman_address: "220.181.47.36",
    school_address: "220.181.47.36"
};

var config_other = {
    ak: "0530019990505",
    ak_new: "0170010010000"
};

/**请求基础*/
var config_base_url = {
    base_url: "http://" + config_address.data_address + "/youguu/",

    base_attention_url: "http://" + config_address.data_address + "/youguu/attention/",

    rank_url: "http://" + config_address.data_address + "/youguu/rank",

    user_url: "http://" + config_address.user_address + "/",

    match_url: "http://" + config_address.match_address + "/youguu/match/",

    superman_url: "http://" + config_address.superman_address + "/youguu/simtrade/",

    school_url: "http://" + config_address.school_address + "/wap/app/"




};

/**网络请求列表*/
var config_url = {
    /** 牛人排行 */
    superman_rank: config_base_url.base_attention_url + "getranklist/{ak}/{uid}/{type}/{page}/{size}",
    /** 牛人总盈利排行 */
    total_rank: config_base_url.rank_url + "/total?fromid={fromid}&reqnum={reqnum}",
    /** 牛人成功排行 */
    suc_rank: config_base_url.rank_url + "/suc?fromid={fromid}&reqnum={reqnum}",
    /** 周排行榜 */
    week_rank: config_base_url.rank_url + "/week?fromid={fromid}&reqnum={reqnum}",
    /** 月排行榜 */
    month_rank: config_base_url.rank_url + "/month?fromid={fromid}&reqnum={reqnum}",
    /** 人气榜 */
    popularity_rank: config_base_url.rank_url + "/popularity?fromid={fromid}&reqnum={reqnum}",
    /** 推荐榜 */
    recommen_rank: config_base_url.rank_url + "/recommen?fromid={fromid}&reqnum={reqnum}",
    /** 榜单最高数据 */
    highest_rank: config_base_url.rank_url + "/highest",
    /**三方登录认证*/
    thirdpart_auth: config_base_url.user_url + "jhss/member/doThirdPartAuth/{ak}/{openid}/{type}/{token}",
    /**普通登录接口*/
    dologonnew: config_base_url.user_url + "jhss/member/dologonnew/{ak}/{username}/{userpwd}",
    /*手机号注册接口*/
    doregister: config_base_url.user_url + "jhss/member/doregister/{ak}/{imei}/{ua}/{size}/{os}/{network}/{operators}/{pwd}/{phone}/{verifycode}",
    /*普通号码注册*/
    doregister_normail: config_base_url.user_url + "jhss/member/doregister/{ak}/{username}/{userpwd}/{nickname}/{sex}/{method}/{style}/{imei}/{ua}/{size}/{os}/{network}/{operators}/{email}/{headpic}",
    /*手机验证码*/
    makeRegisterPin: config_base_url.user_url + "jhss/sms/makeRegisterPin/{phone}/{type}",
    /*验证手机号码*/
    authsmscode: config_base_url.user_url + "jhss/sms/authsmscode/{phone}/{verifycode}/{type}",
    /*股市学堂地址**/
    modulearticlelist: config_base_url.user_url + "wap/app/classroom/articleAction/newModuleStaticArticleList?moduleId={moduleId}",
    /*股票列表**/
    stocklist: config_base_url.base_url + "quote/querystocklist/{ak}/{sid}/{time}/{type}",
    /*普通注册表单*/
    doFormRegister: config_base_url.user_url + "jhss/member/doFormRegister",
    /*找回密码*/
    makeForgotPwdPin: config_base_url.user_url + "jhss/sms/makeForgotPwdPin/{phone}/{type}",
    /*根据绑定手机号找回密码*/
    doRetrievePwd: config_base_url.user_url + "jhss/member/doRetrievePwd/{phone}/{password}?flag={flag}",
    /*所有正在比赛接口*/
    allMatch: config_base_url.match_url + "allMatch?pageIndex={page}&pageSize={num}",
    /*我参与的比赛接口*/
    myMatch: config_base_url.match_url + "myMatch?pageIndex={page}&pageSize={num}",
    /*比赛详细页面*/
    homeMatch: config_base_url.match_url + "homeMatch?matchId={matchid}",
    /*比赛详细页面排行榜*/
    Matchweek: config_base_url.match_url + "rank/week?startid={startid}&reqnum={reqnum}&mid={mid}",
    Matchmonth: config_base_url.match_url + "rank/month?startid={startid}&reqnum={reqnum}&mid={mid}",
    Matchtotal: config_base_url.match_url + "rank/total?startid={startid}&reqnum={reqnum}&mid={mid}",
    /*用户账户信息*/
    showuseracountinfo: config_base_url.base_url + "showuseracountinfo/{ak}/{userid}/{queryuid}/{querymid}",
    /*牛人播报*/
    moduleArticleList: config_base_url.school_url + "classroom/articleAction/moduleArticleList?moduleId={moduleid}&start={start}&limit={limit}",
    articleAction: config_base_url.school_url + "classroom/articleAction/getArticle?id={id}",
    /*行情首页*/
    quoteindex: config_base_url.user_url + "quote/stocklist/home2",
    /*新股列表*/
    newstock: config_base_url.user_url + "quote/stocklist/newstock/list?start={start}&reqnum={reqnum}&order={order}",
    /*大盘指数列表*/
    markstocklist: config_base_url.user_url + "quote/stocklist/marketexponent/list",
    /*热门行业*/
    industrylist: config_base_url.user_url + "quote/stocklist/industry/list?start={start}&reqnum={reqnum}&order={order}",
    /*热门概念*/
    notionlist: config_base_url.user_url + "quote/stocklist/notion/list?start={start}&reqnum={reqnum}&order={order}",
    /*涨跌排行榜*/
    zdranklist: config_base_url.user_url + "quote/stocklist/rank/zd?start={start}&reqnum={reqnum}&order={order}",
    /*振幅排行榜*/
    zflist: config_base_url.user_url + "quote/stocklist/rank/zf?start={start}&reqnum={reqnum}&order={order}",
    /*换手榜*/
    hslist: config_base_url.user_url + "quote/stocklist/rank/hs?start={start}&reqnum={reqnum}&order={order}",
    /*行业或概念股票列表*/
    hygnlist: config_base_url.user_url + "quote/stocklist/board/stock/list?code={code}&start={start}&reqnum={reqnum}&order={order}",
    /*个股*/
    socketinfo: config_base_url.user_url + "quote/stocklist/board/stock/curpricewithtop5?code={code}",
    /** 牛人排行 */
    superman_rank: config_base_url.base_attention_url + "getranklist/{ak}/{uid}/{type}/{page}/{size}",
    /** 牛人总盈利排行 */
    total_rank: config_base_url.rank_url + "/total?fromid={fromid}&reqnum={reqnum}",
    /** 牛人成功排行 */
    suc_rank: config_base_url.rank_url + "/suc?fromid={fromid}&reqnum={reqnum}",
    /** 周排行榜 */
    week_rank: config_base_url.rank_url + "/week?fromid={fromid}&reqnum={reqnum}",
    /** 月排行榜 */
    month_rank: config_base_url.rank_url + "/month?fromid={fromid}&reqnum={reqnum}",
    /** 人气榜 */
    popularity_rank: config_base_url.rank_url + "/popularity?fromid={fromid}&reqnum={reqnum}",
    /** 推荐榜 */
    recommen_rank: config_base_url.rank_url + "/recommen?fromid={fromid}&reqnum={reqnum}",
    /** 榜单最高数据 */
    highest_rank: config_base_url.rank_url + "/highest",
    /**三方登录认证*/
    thirdpart_auth: config_base_url.user_url + "jhss/member/doThirdPartAuth/{ak}/{openid}/{type}/{token}",
    /**普通登录接口*/
    dologonnew: config_base_url.user_url + "jhss/member/dologonnew/{ak}/{username}/{userpwd}",
    /*手机号注册接口*/
    doregister: config_base_url.user_url + "jhss/member/doregister/{ak}/{imei}/{ua}/{size}/{os}/{network}/{operators}/{pwd}/{phone}/{verifycode}",
    /*普通号码注册*/
    doregister_normail: config_base_url.user_url + "jhss/member/doregister/{ak}/{username}/{userpwd}/{nickname}/{sex}/{method}/{style}/{imei}/{ua}/{size}/{os}/{network}/{operators}/{email}/{headpic}",
    /*手机验证码*/
    makeRegisterPin: config_base_url.user_url + "jhss/sms/makeRegisterPin/{phone}/{type}",
    /*验证手机号码*/
    authsmscode: config_base_url.user_url + "jhss/sms/authsmscode/{phone}/{verifycode}/{type}",
    /*股市学堂地址**/
    modulearticlelist: config_base_url.user_url + "wap/app/classroom/articleAction/newModuleStaticArticleList?moduleId={moduleId}",
    /*股票列表**/
    stocklist: config_base_url.base_url + "quote/querystocklist/{ak}/{sid}/{time}/{type}",
    /*普通注册表单*/
    doFormRegister: config_base_url.user_url + "jhss/member/doFormRegister",
    /*找回密码*/
    makeForgotPwdPin: config_base_url.user_url + "jhss/sms/makeForgotPwdPin/{phone}/{type}",
    /*根据绑定手机号找回密码*/
    doRetrievePwd: config_base_url.user_url + "jhss/member/doRetrievePwd/{phone}/{password}?flag={flag}",
    /*所有正在比赛接口*/
    allMatch: config_base_url.match_url + "allMatch?pageIndex={page}&pageSize={num}",
    /*我参与的比赛接口*/
    myMatch: config_base_url.match_url + "myMatch?pageIndex={page}&pageSize={num}",
    /*比赛详细页面*/
    homeMatch: config_base_url.match_url + "homeMatch?matchId={matchid}",
    /*比赛详细页面排行榜*/
    Matchweek: config_base_url.match_url + "rank/week?startid={startid}&reqnum={reqnum}&mid={mid}",
    Matchmonth: config_base_url.match_url + "rank/month?startid={startid}&reqnum={reqnum}&mid={mid}",
    Matchtotal: config_base_url.match_url + "rank/total?startid={startid}&reqnum={reqnum}&mid={mid}",
    /*用户账户信息*/
    showuseracountinfo: config_base_url.base_url + "showuseracountinfo/{ak}/{userid}/{queryuid}/{querymid}",
    /*牛人播报*/
    moduleArticleList: config_base_url.school_url + "classroom/articleAction/moduleArticleList?moduleId={moduleid}&start={start}&limit={limit}",
    articleAction: config_base_url.school_url + "classroom/articleAction/getArticle?id={id}",
    /*行情首页*/
    quoteindex: config_base_url.user_url + "quote/stocklist/home2",
    /*新股列表*/
    newstock: config_base_url.user_url + "quote/stocklist/newstock/list?start={start}&reqnum={reqnum}&order={order}",
    /*大盘指数列表*/
    markstocklist: config_base_url.user_url + "quote/stocklist/marketexponent/list",
    /*热门行业*/
    industrylist: config_base_url.user_url + "quote/stocklist/industry/list?start={start}&reqnum={reqnum}&order={order}",
    /*热门概念*/
    notionlist: config_base_url.user_url + "quote/stocklist/notion/list?start={start}&reqnum={reqnum}&order={order}",
    /*涨跌排行榜*/
    zdranklist: config_base_url.user_url + "quote/stocklist/rank/zd?start={start}&reqnum={reqnum}&order={order}",
    /*振幅排行榜*/
    zflist: config_base_url.user_url + "quote/stocklist/rank/zf?start={start}&reqnum={reqnum}&order={order}",
    /*换手榜*/
    hslist: config_base_url.user_url + "quote/stocklist/rank/hs?start={start}&reqnum={reqnum}&order={order}",
    /*行业或概念股票列表*/
    hygnlist: config_base_url.user_url + "quote/stocklist/board/stock/list?code={code}&start={start}&reqnum={reqnum}&order={order}",
    /*个股新闻*/
    stock_newslist: config_base_url.user_url + "quote/info/newslist?code={code}&fromId={fromid}&limit={limit}",
    /*个股公告*/
    stock_gglist: config_base_url.user_url + "quote/info/bullist?code={code}&fromId={fromid}&limit={limit}",
    /*行业新闻*/
    stock_hnewslist: config_base_url.user_url + "quote/info/indulist?code={code}&fromId={fromid}&limit={limit}",
    /*频道列表*/
    channel_list: config_base_url.user_url + "quote/info/channel",
    /*频道新闻*/
    bullist: config_base_url.user_url + "quote/info/bullist?code={code}&fromId={fromid}&limit={limit}",
    /*日k线除复权**/
    kline_day: config_base_url.user_url + 'quote/kline/day/list?code={code}&xrdrtype={xrdrtype}&pageindex={pageindex}&pagesize={pagesize}',
    /*周月k线除复权**/
    kline_week_month: config_base_url.user_url + 'quote/kline/moredays/list?code={code}&type={type}&xrdrtype={xrdrtype}&pageindex={pageindex}&pagesize={pagesize}',
    /*分时**/
    kline_minute: config_base_url.user_url + 'quote/timeline/daystatus/list?code={code}&start={start}',
    /*模拟炒股首页信息查询接口*/
    getAccountDetail:config_base_url.superman_url+"getAccountDetail?matchid={matchid}"
};

function GalHttpRequest(base_url, params) {
    this.base_url = base_url;
    this.params = params;
}

GalHttpRequest.prototype.requestFromNet = function (callback) {
    if (callback == null) {
        return;
    }

    var xhr = createXMLHttpRequest(this.base_url, this.params);
    if (!xhr) {
        callback.error({
            status: "-0001",
            message: "浏览器不支持跨域请求"
        });
        return;
    }

    xhr.onloadend = function () {
        var text = xhr.responseText;
        console.log("text:" + text);
        if (!text) {
            callback.error({
                status: "-0001",
                message: "回调文本为空"
            });
        }
        var data = getObjectFromText(text);
        if (data && data.status == "0000") {
            callback.succeed(data);
        } else {
            callback.error(data);
        }
    };

    xhr.onerror = function (error) {
        callback.error({
            status: "-0001",
            message: error.toString()
        });
    };
    xhr.withCredentials = true;
    xhr.send();
};

GalHttpRequest.prototype.requestPacketFromNet = function (callback) {
    if (callback == null) {
        return;
    }

    var xhr = createXMLHttpRequest(this.base_url, this.params);
    if (!xhr) {
        callback.error({
            status: "-0001",
            message: "浏览器不支持跨域请求"
        });
        return;
    }

    //保证返回流不被修改
    xhr.overrideMimeType("text/plain; charset=x-user-defined");

    xhr.onerror = function (error) {
        callback.error({
            status: "-0001",
            message: error.toString()
        });
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            try {
                var s = xhr.status;
                if (s >= 200 && s < 300) {
                    var data = xhr.response;
                    var buff = [];
                    for (var i = 0, j = data.length; i < j; i++) {
                        buff.push(data[i].charCodeAt(0));
                    }
                    var len = readInt(buff);
                    var seq = readInt(buff);
                    var operatecode = readInt(buff);
                    var packet = new Packet(operatecode, seq);
                    packet.input(buff);
                    try {
                        packet.decode();
                    } catch (error) {
                        callback.error({
                            status: "-0002",
                            message: '数据异常'
                        });
                    }
                    var info = packet.getValue();
                    if (info.status.status == '0000' || info.status[0].status == '0000') {
                        callback.succeed(info);
                    } else {
                        callback.error(info);
                    }

                } else {
                    callback.error({
                        status: "-0003",
                        message: '数据异常'
                    });
                }
            } catch (e) {
                callback.error({
                    status: "-0004",
                    message: e.toString()
                });
            }
        } else {}
    };
    xhr.ontimeout = function () {
        callback.error({
            status: "-0006",
            message: '请求超时'
        });
    };
    xhr.withCredentials = true;
    try {
        xhr.send();
    } catch (e) {
        console.log('error');
    }


};

GalHttpRequest.prototype.jiemibase64 = function (data) {
    var text1 = getObjectFromText(data);
    return text1;
};

function getObjectFromText(text) {
    var base64 = new Base64();
    if (text.indexOf("~") == 0) {
        text = base64.decode(text);
    }
    var data = eval("(" + text + ")");
    return data;
}

function createXMLHttpRequest(base_url, params) {
    var base64 = new Base64();
    var request_url = replaceUrl(base_url, params);
    //使用默认值
    var user_id;
    var session_id;
    try {
        if (typeof (window.localStorage) === 'object' && localStorage.getItem("userinfo_currect")) {
            user_id = JSON.parse(localStorage.getItem("userinfo_currect")).userid;
            session_id = JSON.parse(localStorage.getItem("userinfo_currect")).sessionid;
        } else {
            user_id = "-1";
            session_id = "0110001";
        }
    } catch (err) {}

    //生成XMLHttpRequest
    var xhr = createCorsRequest(request_url, "GET");

    //添加请求头
    if (xhr) {
        xhr.setRequestHeader("ak", config_other.ak_new);
        xhr.setRequestHeader("userid", user_id);
        xhr.setRequestHeader("sessionid", session_id);
    }
    console.log("请求地址:" + request_url);
    return xhr;
}

function replaceUrl(base_url, params) {
    var base64 = new Base64();
    var request_url = base_url;
    //从数据中获取以下值
    var ak = "";
    var user_id = "";
    var user_name = "";
    var session_id = "";

    //替换URL
    if (params) {
        for (var param_name in params) {
            request_url = request_url.replace("{" + param_name + "}", base64.encode(params[param_name]));
        }
    }
    return request_url;
}

function createCorsRequest(url, method) {
    var xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr) {
        // Check if the XMLHttpRequest object has a "withCredentials" property.
        // "withCredentials" only exists on XMLHTTPRequest2 objects.
        xhr.open(method, url, true);
    } else if (typeof XDomainRequest != "undefined") {
        // Otherwise, check if XDomainRequest.
        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
        xhr = new XDomainRequest();
        xhr.open(method, url);
    } else {
        // Otherwise, CORS is not supported by the browser.
        xhr = null;
    }
    return xhr;
}

function Base64() {}

/*!
 *10個策略 随机使用
 * */
var keys = ["789_-ABCDEFGHIJKLMNOPQRSTUVWXYZ6abcdefghijklmnopqrstuvwxyz501234", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-", "3456789_-ABCDEFGHIJKLMNOPQRSTUVWX2YZabcdefghijklmnopqr1stuvwxyz0", "-ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz9012345678", "_-ABCDEFGHIJKLMNOPQRSTUVWXYZ9abcdefghijklmnopqrstuvwxyz801234567", "9_-ABCDEFGHIJKLMNOPQRSTUVWXYZ8abcdefghijklmnopqrstuvwxyz70123456", "6789_-ABCDEFGHIJKLMNOPQRSTUVWXYZ5abcdefghijklmnopqrstuvwxyz40123", "89_-ABCDEFGHIJKLMNOPQRSTUVWXYZ7abcdefghijklmnopqrstuvwxyz6012345", "456789_-ABCDEFGHIJKLMNOPQRSTUVWXY3Zabcdefghijklmnopqrs2tuvwxyz01", "56789_-ABCDEFGHIJKLMNOPQRSTUVWXYZ4abcdefghijklmnopqrstuvwxyz3012"];

/*!
 * 加密base64加密的数据
 */
Base64.prototype.encode = function (en_str) {
    var random_index = Math.floor(Math.random() * 10);
    var key = keys[random_index];
    var de_str = "~" + random_index;

    var chr1, chr2, chr3;
    var en_byte = getBytesFromString(en_str);
    len = en_byte.length;
    var i = 0;
    while (i < len) {
        chr1 = en_byte[i++] & 0xff;
        if (i == len) {
            de_str += key.charAt(chr1 >> 2);
            de_str += key.charAt((chr1 & 0x3) << 4);
            break;
        }

        chr2 = en_byte[i++];
        if (i == len) {
            de_str += key.charAt(chr1 >> 2);
            de_str += key.charAt(((chr1 & 0x3) << 4) | ((chr2 & 0xF0) >> 4));
            de_str += key.charAt((chr2 & 0xF) << 2);
            break;
        }

        chr3 = en_byte[i++];
        de_str += key.charAt(chr1 >> 2);
        de_str += key.charAt(((chr1 & 0x3) << 4) | ((chr2 & 0xF0) >> 4));
        de_str += key.charAt(((chr2 & 0xF) << 2) | ((chr3 & 0xC0) >> 6));
        de_str += key.charAt(chr3 & 0x3F);
    }

    return de_str;
};

/*!
 * 解密base64加密的数据
 */
Base64.prototype.decode = function (de_str) {
    var key_index = de_str.substr(1, 1);
    var really_str = de_str.substr(2);

    var key = keys[key_index];
    var len = really_str.length;
    var en_btyes = [];

    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    while (i < really_str.length) {
        enc1 = key.indexOf(really_str.charAt(i++));
        enc2 = key.indexOf(really_str.charAt(i++));
        enc3 = key.indexOf(really_str.charAt(i++));
        enc4 = key.indexOf(really_str.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        if (chr1 > 0) {
            en_btyes.push(chr1);
        }

        if (enc3 != 64 && chr2 > 0) {
            en_btyes.push(chr2);
        }

        if (enc4 != 64 && chr3 > 0) {
            en_btyes.push(chr3);
        }
    }
    return getStringFromByteArrs(en_btyes);
};

function readInt(buff) {
    return (buff.shift() << 24) | (buff.shift() << 16) | (buff.shift() << 8) | (buff.shift() & 0xff);
}

/**Packet解析*/
function Packet(operatecode, seq) {
    this.operatecode = operatecode;
    this.seq = seq;
};

/**Packet输入解析流*/
Packet.prototype.input = function (buff) {
    this.buff = buff;
};

/**Packet解析方法*/
Packet.prototype.decode = function () {
    var count = this.getInt();
    this.tables = [];
    for (var i = 0; i < count; i++) {
        this.tables.push(this.decodeTable());
    }
};

/**获取Packet解析完成Object*/
Packet.prototype.getValue = function () {
    var info = {};
    if (!this.tables) {
        return info;
    }
    for (var i = 0; i < this.tables.length; i++) {
        var table = this.tables[i];
        info[table.name] = table.rows;
    }
    return info;
};

/**解析表*/
Packet.prototype.decodeTable = function () {
    var table = {};
    var nameLen = this.getInt();
    if (nameLen > this.buff.length) {
        throw new Error('数据异常');
    }
    table.name = getStringFromByteArrs(this.get(nameLen)).toLocaleLowerCase();
    table.field = [];
    var names = [];
    table.rows = [];
    var fieldCount = this.getInt();
    for (var i = 0; i < fieldCount; i++) {
        var field = this.decodeField();
        table.field.push(field);
        names.push(field.name);
    }
    var rowCount = this.getInt();
    for (var i = 0; i < rowCount; i++) {
        table.rows.push(this.decodeRow(table.field));
    }
    return table;
};

/**解析列名*/
Packet.prototype.decodeField = function () {
    var datafield = {};
    var flag = this.buff.shift();
    datafield.type = String.fromCharCode(this.buff.shift());
    datafield.precise = this.getShort();
    datafield.length = this.getInt();
    var size = this.getInt();
    if (size > this.buff.length) {
        throw new Error('数据异常');
    }
    datafield.name = getStringFromByteArrs(this.get(size)).toLocaleLowerCase();
    if (flag > 0 && this.buff.length > 4) {
        size = Math.min(this.getInt(), this.buff.length);
        datafield.caption = getStringFromByteArrs(this.get(size));
    }
    return datafield;
};

/**解析数据列*/
Packet.prototype.decodeRow = function (fields) {
    var row = {};
    for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        var name = field.name;
        switch (field.type) {
            case 'B':
                var len = this.getInt();
                if (len > this.buff.length) {
                    throw new Error('数据异常');
                }
                row[name] = this.get(len);
                break;
            case 'S':
                len = this.getInt();
                if (len > this.buff.length) {
                    throw new Error('数据异常');
                }
                row[name] = getStringFromByteArrs(this.get(len))
                break;
            case 'C':
                row[name] = this.getChar();
                break;
            case 'T':
                row[name] = this.getShort();
                break;
            case 'N':
                row[name] = this.getInt();
                break;
            case 'L':
                row[name] = this.getLong();
                break;
            case '1':
                row[name] = this.getCompressLong();
                break;
            case '2':
                row[name] = this.getCompressInt();
                break;
            case '3':
                row[name] = this.getCompressDateTime();
                break;
            case 'F':
                row[name] = this.getFloat();
                break;
            case 'D':
                row[name] = this.getDouble();
                break;
            default:
                console.log('未知类型:' + field.type);
                break;
        }
    }
    return row;
};

Packet.prototype.get = function (count) {
    var temp = [];
    for (var i = 0; i < count; i++) {
        temp.push(this.buff.shift());
    }
    return temp;
};

Packet.prototype.getChar = function () {
    String.fromCharCode(this.buff.shift());
};

Packet.prototype.getShort = function () {
    var b0 = this.buff.shift();
    var b1 = this.buff.shift();
    return (b0 << 8) | (b1 & 0xff);
};

Packet.prototype.getInt = function () {
    var b0 = this.buff.shift();
    var b1 = this.buff.shift();
    var b2 = this.buff.shift();
    var b3 = this.buff.shift();
    var addr = b3 & 0xFF;
    addr |= ((b2 << 8) & 0xFF00);
    addr |= ((b1 << 16) & 0xFF0000);
    addr |= ((b0 << 24) & 0xFF000000);
    return addr;
};

Packet.prototype.getLong = function () {
    var b0 = ((this.buff.shift() & 0xff) << 56) >>> 0;
    var b1 = ((this.buff.shift() & 0xff) << 48) >>> 0;
    var b2 = ((this.buff.shift() & 0xff) << 40) >>> 0;
    var b3 = ((this.buff.shift() & 0xff) << 32) >>> 0;
    var b4 = ((this.buff.shift() & 0xff) << 24) >>> 0;
    var b5 = ((this.buff.shift() & 0xff) << 16) >>> 0;
    var b6 = ((this.buff.shift() & 0xff) << 8) >>> 0;
    var b7 = (this.buff.shift() & 0xff) >>> 0;

    var value = (b0 | b1 | b2 | b3 | b4 | b5 | b6 | b7) >>> 0;
    return value;
};

Packet.prototype.getCompressDateTime = function () {
    var intDateTime = this.getInt();
    var minute = intDateTime & 0x3F;
    var hour = (intDateTime >>> 6) & 0x1F;
    var day = (intDateTime >>> 11) & 0x1F;
    var month = (intDateTime >>> 16) & 0x0F;
    var year = (intDateTime >>> 20) & 0x0FFF;
    var longDateTime = year * 10000000000 + month * 100000000 + day * 1000000 + hour * 10000 + minute * 100;
    return longDateTime;
};

Packet.prototype.getCompressInt = function () {
    var val = 0;
    var b;
    var ind = 0;
    do {
        b = this.buff.shift();
        if (ind == 0 && (b & 0x40) != 0) {
            val = 0xffffffff;
        }
        ind++;
        val = (val << 7) | (b & 0x7f);
    } while ((b & 0x80) == 0);
    return val;
};

Packet.prototype.getCompressLong = function () {
    var val_low = 0;
    var val_high = 0;
    var b;
    var ind = 0;
    do {
        b = this.buff.shift();
        if (ind == 0 && (b & 0x40) != 0) {
            val_low = 0xffffffff;
            val_high = 0xffffffff;
        }
        ind++;
        val_high = (val_high << 7) | (val_low >>> (32 - 7));
        val_low = (val_low << 7) | (b & 0x7f);
    }
    while ((b & 0x80) == 0);
    return val_high * Math.pow(1 << 16, 2) + (val_low < 0 ? Math.pow(1 << 16, 2) : 0) + val_low;
};

Packet.prototype.getFloat = function () {
    return intBitsToFloat(this.getInt());
};

Packet.prototype.getDouble = function () {
    var b0 = this.buff.shift() & 0xff;
    var b1 = this.buff.shift() & 0xff;
    var b2 = this.buff.shift() & 0xff;
    var b3 = this.buff.shift() & 0xff;
    var b4 = this.buff.shift() & 0xff;
    var b5 = this.buff.shift() & 0xff;
    var b6 = this.buff.shift() & 0xff;
    var b7 = this.buff.shift() & 0xff;

    var signed = b0 & 0x80;
    var e = (b1 & 0xF0) >> 4;
    e += (b0 & 0x7F) << 4;

    var m = b7;
    m += b6 << 8;
    m += b5 << 16;
    m += b4 * Math.pow(2, 24);
    m += b3 * Math.pow(2, 32);
    m += b2 * Math.pow(2, 40);
    m += (b1 & 0x0F) * Math.pow(2, 48);

    switch (e) {
        case 0:
            e = -1022;
            break;
        case 2047:
            return m ? NaN : (signed ? -Infinity : Infinity);
        default:
            m += Math.pow(2, 52);
            e -= 1023;
    }
    if (signed) {
        m *= -1;
    }
    return m * Math.pow(2, e - 52);
};

function intBitsToFloat(i) {
    var int8 = new Int8Array(4); //[0,0,0,0]
    var int32 = new Int32Array(int8.buffer, 0, 1); //0
    var float32 = new Float32Array(int8.buffer, 0, 1); //0
    int32[0] = i;
    return float32[0];
}

function getBytesFromString(str) {
    var utf8 = unescape(encodeURIComponent(str));
    var arr = [];
    for (var i = 0; i < utf8.length; i++) {
        arr.push(utf8.charCodeAt(i));
    }
    return arr;
}

function getStringFromByteArrs(arr) {
    var i, str = '';
    for (i = 0; i < arr.length; i++) {
        str += '%' + ('0' + arr[i].toString(16)).slice(-2);
    }
    str = decodeURIComponent(str);
    return str;
}